{"version":3,"sources":["util/calculatorButtons.js","App.js","components/Display.js","components/Button.js","components/Keypad.js","reportWebVitals.js","index.js"],"names":["calculatorButtons","operation","type","label","formula","displaySymbol","App","useState","inputDisplay","setInputDisplay","result","setResult","justEvaluated","setJustEvaluated","openParentheses","setOpenParentheses","closeParentheses","setCloseParentheses","currentOperand","setCurrentOperand","handleClick","button","lastItem","length","lastItemType","find","item","lastItemOperation","join","prevArray","indexOf","slice","answer","eval","toString","answerAsArray","className","input","Display","Button","onClick","Keypad","items","i","push","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6eaba3d.chunk.js","sourcesContent":["const calculatorButtons = [\r\n  {\r\n    operation: 'log',\r\n    type: 'function',\r\n    label: 'log',\r\n    formula: 'Math.log10',\r\n    displaySymbol: 'log'\r\n  },\r\n  {\r\n    operation: 'ln',\r\n    type: 'function',\r\n    label: 'ln',\r\n    formula: 'Math.log',\r\n    displaySymbol: 'ln'\r\n  },\r\n  {\r\n    operation: 'open-parenthesis',\r\n    type: 'open-parenthesis',\r\n    label: '(',\r\n    formula: '(',\r\n    displaySymbol: '('\r\n  },\r\n  {\r\n    operation: 'close-parenthesis',\r\n    type: 'close-parenthesis',\r\n    label: ')',\r\n    formula: ')',\r\n    displaySymbol: ')'\r\n  },\r\n  {\r\n    operation: 'clear',\r\n    type: 'clear',\r\n    label: 'C',\r\n    formula: null,\r\n    displaySymbol: null\r\n  },\r\n  {\r\n    operation: 'sqrt',\r\n    type: 'function',\r\n    label: '√',\r\n    formula: 'Math.sqrt',\r\n    displaySymbol: '√'\r\n  },\r\n  {\r\n    operation: 'seven',\r\n    type: 'operand',\r\n    label: '7',\r\n    formula: '7',\r\n    displaySymbol: '7'\r\n  },\r\n  {\r\n    operation: 'eight',\r\n    type: 'operand',\r\n    label: '8',\r\n    formula: '8',\r\n    displaySymbol: '8'\r\n  },\r\n  {\r\n    operation: 'nine',\r\n    type: 'operand',\r\n    label: '9',\r\n    formula: '9',\r\n    displaySymbol: '9'\r\n  },\r\n  {\r\n    operation: 'divide',\r\n    type: 'operator',\r\n    label: '÷',\r\n    formula: '/',\r\n    displaySymbol: '÷'\r\n  },\r\n  {\r\n    operation: 'square',\r\n    type: 'operator',\r\n    label: 'x²',\r\n    formula: '**2',\r\n    displaySymbol: '^2'\r\n  },\r\n  {\r\n    operation: 'four',\r\n    type: 'operand',\r\n    label: '4',\r\n    formula: '4',\r\n    displaySymbol: '4'\r\n  },\r\n  {\r\n    operation: 'five',\r\n    type: 'operand',\r\n    label: '5',\r\n    formula: '5',\r\n    displaySymbol: '5'\r\n  },\r\n  {\r\n    operation: 'six',\r\n    type: 'operand',\r\n    label: '6',\r\n    formula: '6',\r\n    displaySymbol: '6'\r\n  },\r\n  {\r\n    operation: 'multiply',\r\n    type: 'operator',\r\n    label: '×',\r\n    formula: '*',\r\n    displaySymbol: '×'\r\n  },\r\n  {\r\n    operation: 'exponent',\r\n    type: 'operator',\r\n    label: 'xʸ',\r\n    formula: '**',\r\n    displaySymbol: '^'\r\n  },\r\n  {\r\n    operation: 'one',\r\n    type: 'operand',\r\n    label: '1',\r\n    formula: '1',\r\n    displaySymbol: '1'\r\n  },\r\n  {\r\n    operation: 'two',\r\n    type: 'operand',\r\n    label: '2',\r\n    formula: '2',\r\n    displaySymbol: '2'\r\n  },\r\n  {\r\n    operation: 'three',\r\n    type: 'operand',\r\n    label: '3',\r\n    formula: '3',\r\n    displaySymbol: '3'\r\n  },\r\n  {\r\n    operation: 'add',\r\n    type: 'operator',\r\n    label: '+',\r\n    formula: '+',\r\n    displaySymbol: '+'\r\n  },\r\n  {\r\n    operation: 'WTI',\r\n    type: 'WTI',\r\n    label: 'WTI',\r\n    formula: null,\r\n    displaySymbol: null\r\n  },\r\n  {\r\n    operation: 'decimal',\r\n    type: 'operand',\r\n    label: '.',\r\n    formula: '.',\r\n    displaySymbol: '.'\r\n  },\r\n  {\r\n    operation: 'zero',\r\n    type: 'operand',\r\n    label: '0',\r\n    formula: '0',\r\n    displaySymbol: '0'\r\n  },\r\n  {\r\n    operation: 'equals',\r\n    type: 'equals',\r\n    label: '=',\r\n    formula: '=',\r\n    displaySymbol: null\r\n  },\r\n  {\r\n    operation: 'subtract',\r\n    type: 'operator',\r\n    label: '−',\r\n    formula: '-',\r\n    displaySymbol: '−'\r\n  }\r\n];\r\n\r\nexport default calculatorButtons;","import React, { useState } from 'react';\nimport Display from './components/Display';\nimport Keypad from './components/Keypad';\nimport './App.css';\nimport calculatorButtons from './util/calculatorButtons';\n\nconst App = () => {\n  const [inputDisplay, setInputDisplay] = useState(['0']);\n  const [result, setResult] = useState(['0']);\n  const [justEvaluated, setJustEvaluated] = useState(false);\n  const [openParentheses, setOpenParentheses] = useState(0);\n  const [closeParentheses, setCloseParentheses] = useState(0);\n  const [currentOperand, setCurrentOperand] = useState('');\n\n  const handleClick = (button) => {\n    const lastItem = result[result.length - 1];\n    const lastItemType = calculatorButtons.find(item => item.formula === lastItem).type;\n    const lastItemOperation = calculatorButtons.find(item => item.formula === lastItem).operation;\n\n    if (button.type === 'clear') {\n      setInputDisplay(['0']);\n      setResult(['0']);\n      setOpenParentheses(0);\n      setCloseParentheses(0);\n      setCurrentOperand('');\n    } else if (button.type === 'open-parenthesis') {\n      if (result.join('') === '0' || justEvaluated) {\n        // The current result/output is either 0 or a just calculated value, so we can replace it with a \n        // new equation starting with the opening parenthesis\n        setInputDisplay([button.displaySymbol]);\n        setResult([button.formula]);\n        setOpenParentheses(openParentheses + 1);\n        setJustEvaluated(false);\n        setCurrentOperand('');\n      } else if (lastItemType === 'operator' || lastItemType === 'open-parenthesis') {\n        // Otherwise, an open parenthesis can only go after an operator or another open parenthesis\n        setInputDisplay(prevArray => ([...prevArray, button.displaySymbol]));\n        setResult(prevArray => ([...prevArray, button.formula]));\n        setOpenParentheses(openParentheses + 1);\n        setJustEvaluated(false);\n        setCurrentOperand('');\n      }\n    } else if (button.type === 'close-parenthesis') {\n      if (((lastItemType === 'operand' && lastItemOperation !== 'decimal') \n        || lastItemType === 'close-parenthesis') && closeParentheses < openParentheses) {\n        /* Closing parenthesis can only go after a digit or another closing parenthesis, otherwise\n           we should not be allowed to enter a closing parenthesis. Also, we should not be able to \n           add more closing parentheses than we have opening parentheses */\n        setInputDisplay(prevArray => ([...prevArray, button.displaySymbol]));\n        setResult(prevArray => ([...prevArray, button.formula]));\n        setCloseParentheses(closeParentheses + 1);\n        setCurrentOperand('');\n      }\n    } else if (button.type === 'operand') {\n      // An operand in this case includes digits or decimals (i.e. the parts that make up an operand)\n      if (lastItemType !== 'close-parenthesis') {\n        // Operands can start after any type (i.e after operators, opening parenthesis) except for closing parenthesis\n        if (result.join('') === '0' || justEvaluated) {\n          // If the result displayed is just a 0 or a recently calculated result, we want to completely replace it\n          // with any operand we enter instead of appending to it.\n          if (button.operation === 'decimal') {\n            setInputDisplay(['0', button.displaySymbol]);\n            setResult(['0', button.formula]);\n            setCurrentOperand('0.');\n          } else {\n            setInputDisplay([button.displaySymbol]);\n            setResult([button.formula]);\n            setCurrentOperand(button.formula);\n          }\n        } else {\n          if (button.operation === 'decimal') {\n            if (currentOperand.indexOf('.') === -1) {\n            // Only add the decimal if the current operand doesn't have a decimal already\n            // (i.e. can't have two decimal points in a single number)\n              setInputDisplay(prevArray => ([...prevArray, button.displaySymbol]));\n              setResult(prevArray => ([...prevArray, button.formula]));\n              setCurrentOperand(currentOperand + button.formula);\n            }\n          } else {\n            // Button is not a decimal, but is a digit\n            if (currentOperand === '0') {\n              // If the current operand is 0, we want to make sure we remove it and replace it with \n              // the digit we just pressed to avoid leading zeros.\n              setInputDisplay(prevArray => ([...prevArray.slice(0, prevArray.length - 1), button.displaySymbol]));\n              setResult(prevArray => ([...prevArray.slice(0, prevArray.length - 1), button.formula]));\n              setCurrentOperand(button.formula);\n            } else {\n              setInputDisplay(prevArray => ([...prevArray, button.displaySymbol]));\n              setResult(prevArray => ([...prevArray, button.formula]));\n              setCurrentOperand(currentOperand + button.formula);\n            }\n          }\n        }\n\n        setJustEvaluated(false);\n      }\n    } else if (button.type === 'operator') {\n      // Operators (i.e. +, -, x, /) can only come after operands or closing parentheses\n      if ((lastItemType === 'operand' && lastItemOperation !== 'decimal')\n         || lastItemType === 'close-parenthesis') {\n        if (button.operation === 'exponent') {\n          setInputDisplay(prevArray => ([...prevArray, button.displaySymbol, '(']));\n          setResult(prevArray => ([...prevArray, button.formula, '(']));\n          setOpenParentheses(openParentheses + 1);\n        } else if (button.operation === 'square') {\n          setInputDisplay(prevArray => ([...prevArray, '^', '2']));\n          setResult(prevArray => ([...prevArray, '**', '2']));\n        } else {\n          setInputDisplay(prevArray => ([...prevArray, button.displaySymbol]));\n          setResult(prevArray => ([...prevArray, button.formula]));\n        }\n\n        setJustEvaluated(false);\n        setCurrentOperand('');\n      }\n    } else if (button.type === 'function') {\n      if (result.join('') === '0' || justEvaluated) {\n        // Current result/output is either 0 or a just calculated value, so we can replace it with a new equation\n        // starting with the function that was selected\n        setInputDisplay([button.displaySymbol, '(']);\n        setResult([button.formula, '(']);\n        setOpenParentheses(openParentheses + 1);\n        setJustEvaluated(false);\n        setCurrentOperand('');\n      } else {\n        // Functions (i.e. sqrt(), log(), log10()) can only come after operators or opening parentheses\n        if (lastItemType === 'operator' || lastItemType === 'open-parenthesis') {\n          setInputDisplay(prevArray => ([...prevArray, button.displaySymbol, '(']));\n          setResult(prevArray => ([...prevArray, button.formula, '(']));\n          setOpenParentheses(openParentheses + 1);\n          setJustEvaluated(false);\n          setCurrentOperand('');\n        }\n      }\n    } else if (button.type === 'equals') {\n      // Equals only come after operands or closing parentheses\n      if ((lastItemType === 'operand' || lastItemType === 'close-parenthesis') && openParentheses === closeParentheses) {\n        const answer = eval(result.join('')).toString();\n        const answerAsArray = [...answer];\n        setInputDisplay(answerAsArray);\n        setResult(answerAsArray);\n        setJustEvaluated(true);\n        setOpenParentheses(0);\n        setCloseParentheses(0);\n        setCurrentOperand('');\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"calc-wrapper\">\n        <Display input={inputDisplay}/>\n        <Keypad handleClick={handleClick}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport './Display.css'\r\n\r\nconst Display = ({ input }) => {\r\n  return (\r\n    <div className='calc-display'>\r\n      {input.join('')}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = ({ handleClick, button }) => {\r\n  return (\r\n    <button className={`calc-button ${button.type}`} onClick={() => {handleClick(button)}}>\r\n      {button.label}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button';\r\nimport './Keypad.css';\r\nimport calculatorButtons from '../util/calculatorButtons';\r\n\r\nconst Keypad = ({ handleClick }) => {\r\n  const buttonsPerRow = 5;\r\n  const items = [];\r\n\r\n  for (let i = 0; i < calculatorButtons.length / buttonsPerRow; i++) {\r\n    items.push(\r\n      <div className='keypad-row' key={i}>\r\n        {calculatorButtons.slice(i * buttonsPerRow, (i+1) * buttonsPerRow).map((button, index) => {\r\n          return <Button className={button.operation} handleClick={handleClick} button={button} key={index}/>\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='keypad-wrapper'>\r\n      {items}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Keypad;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}